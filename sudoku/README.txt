Name: main.c
Authors: Brayden Faulkner and Hayden Nanny
Project: Sudoku

	This project is designed to use multi-threading to quickly check the validity of a given sudoku puzzle. It uses 11 threads to check the puzzle. One to check every column, one to check every row, and 9 threads to check every 3*3 block. Every thread checks for validity of its given section, returning an integer 1 if the section or sections or valid, or returning a an integer 0 if that section is not valid.
	The first function to disscuss is the main function. The main function does quite a bit of work in this program, serving as both the hub for other function, and creating the threads and managing their results. It also handles error management in the case of an incorrect number of arguements.The program should revieve exactly one arguement containing the file name. Main gets the puzzle from the read_puzzle function, and stores it a 2d pointer of ints. It uses a double nested for loop, where each loop increments by three instead of one at each step, to create the parameters to be passed to and the block checking threads. It then creates and runs the threads to check the rows and columns. A for loop is used to join all of the threads, and store their results in an array. Lastly it loops through the array contianing all the results checking for a negative result. If one is found th eprogram tells the user the puzzle is not valid, if not then the program tells the user the puzzle is valid.
Next the readPuzzle function needs to be disscussed. This function is responsible for reading in the raw puzzle from a file, passing it to the removeSpace function to be filtered and returning back a double nested pointer of ints that contain the puzzle. It also handles error checking if the file the user gives the program does not exist. It uses a for loop and getline to read the function into a temporary 2d array of characters to store the raw data so it can be passed to the removeSpace function.
The removeSpace function is responsible for taking a 2d array containing the unfiltered puzzle, and returning a 2d array containing just the numbers in the puzzle in their proper place. It uses a doubly nested loop to convert each character to an int, and storing it in the double pointer of ints called puzzle. It then returns puzzle to readPuzzle so that it can in turn return it to main.
checkBlock is the function that serves as the base for the threads that are responsible for checking the 3*3 blocks in the puzzle. It takes in the puzzle, and the first row and column it is responsible for checking as parameters from the args struct. It uses a double nested for loop to read the 9 spots it is responsible for checking into line, and passing them to groupCheck to be checked for validity.
checkRows and checkCols are very similar both in function and structure, except the fact one checks the rows while the other checs the columns in the puzzle. They both take the puzzle as an arguement using the args struct.They then use a double nested loop to load each item in each line into the line array, and use groupCheck to test their validity. It is important to note that they seperate each column or row and only test one at a time with groupCheck.
groupCheck checks a array of nine integers to see if they are the individual number 1-9. If there are any repeats it returns the integer 0. If not it returns the integer 1.
There a no known bugs in this code at this time. While not neccessarily an issue, the creators agree their is too much code in main. The amount of code needed to accomplish certain task was underestimated, and these tasks were delegated to main. This lead to more code in main than we would've liked.While this is not neccessarily an issue that could lead to any functional problem, it would have served better to outsource some of these tasks to functions. 
